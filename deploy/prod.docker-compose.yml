version: '3.8'

services:
  db:
    container_name: ${PROJECT_NAME}_database
    image: postgres:14
    volumes:
      - ${PROJECT_NAME}_database_data:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_HOST_PORT}:${POSTGRES_PORT}
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    restart: always

  rabbitmq-image:
    container_name: ${PROJECT_NAME}_rabbitmq_image
    image: rabbitmq:3.11.10-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD}
    ports:
      - ${RABBIT_HOST_PORT}:${RABBIT_PORT}
      - ${RABBIT_MANAGE_HOST_PORT}:${RABBIT_MANAGE_PORT}
    volumes:
      - ${PROJECT_NAME}_rabbitmq_data:/var/lib/rabbitmq
    restart: always

  tg_bot:
    container_name: ${PROJECT_NAME}_tg_bot
    build:
      context: ../
      dockerfile: deploy/tg_bot.Dockerfile
    depends_on:
      - db
    restart: on-failure
  
  admin_api:
    container_name: ${PROJECT_NAME}_admin_api
    build:
      context: ../
      dockerfile: deploy/admin_api.Dockerfile
    ports:
      - ${ADMIN_API_HOST_PORT}:${ADMIN_API_PORT}
    depends_on:
      - db
      - tg_bot
    restart: on-failure

  rabbitmq:
    container_name: ${PROJECT_NAME}_rabbitmq
    build:
      context: ../
      dockerfile: deploy/rabbitmq.Dockerfile
    depends_on:
      - rabbitmq-image
    restart: on-failure
  
volumes:
 black_jack_database_data:
 black_jack_rabbitmq_data: